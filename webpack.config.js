const path = require('path');

const CaseSensitivePathsPlugin = require('case-sensitive-paths-webpack-plugin');
const { CheckerPlugin } = require('awesome-typescript-loader');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const StyleLintPlugin = require('stylelint-webpack-plugin');
const webpack = require('webpack');
const WebpackMd5Hash = require('webpack-md5-hash');

const baseUrl = '/';
const rootDir = __dirname;
const appPath = path.resolve(rootDir, 'src');
const pubPath = path.resolve(rootDir, 'public');
const outPath = path.resolve(rootDir, 'build');
const postcss = () => {
  return {
    loader: 'postcss-loader',
    options: {
      plugins: () => {
        return [require('autoprefixer')];
      },
    },
  };
};

const config = {
  target: 'web',
  context: rootDir,
  resolve: {
    extensions: ['.webpack.js', '.web.js', '.ts', '.tsx', '.js', '.jsx'],
    modules: [appPath, 'node_modules'],
    moduleExtensions: ['-loader'],
  },
  module: {
    rules: [
      {
        enforce: 'pre',
        test: /\.js$/,
        use: ['source-map-loader'],
        exclude: /node_modules/,
      },
      {
        enforce: 'pre',
        test: /\.tsx?$/,
        use: ['source-map-loader', 'tslint-loader'],
        include: appPath,
      },
      {
        test: /\.tsx?$/,
        use: ['awesome-typescript-loader'],
        include: appPath,
      },
    ],
  },
  plugins: [
    // new webpack.IgnorePlugin(/^\.\/locale$/, [/moment$/]),
    new HtmlWebpackPlugin({
      inject: true,
      template: 'public/index.html',
      favicon: 'public/favicon.ico',
      chunksSortMode: 'dependency',
      minify: {
        collapseWhitespace: true,
        includeAutoGeneratedTags: false,
        processConditinalComments: true,
      },
      metadata: {
        production: process.env.NODE_ENV === 'production',
        api: process.env.API_HOST,
      },
    }),
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: JSON.stringify(process.env.NODE_ENV),
        API_HOST: JSON.stringify(process.env.API_HOST),
        SESSION_NAME: JSON.stringify('s'),
      },
    }),
  ],
};

if (process.env.NODE_ENV === 'production') {
  config.bail = true;
  config.devtool = false;
  config.entry = {
    app: './src/index.tsx',
    bootstrap: [
      'react',
      'react-addons-update',
      'react-dom',
      'react-redux',
      'react-router',
      'redux',
      'redux-thunk',
    ],
    antd: [
      'antd/lib/button',
    ],
    vendor: [
      'axios',
    ],
  };
  config.output = {
    publicPath: baseUrl,
    path: outPath,
    filename: 'static/js/[name].[chunkhash:10].bundle.js',
    sourceMapFilename: 'static/js/[name].[chunkhash:10].bundle.map',
    chunkFilename: 'static/js/[id].[chunkhash:10].chunk.js',
  };
  config.module.rules = [
    ...config.module.rules,
    {
      test: /\.tsx?$/,
      use: ['awesome-typescript-loader'],
      include: appPath,
    },
    {
      test: /\.css$/,
      loader: ExtractTextPlugin.extract(['css-loader?minimize', postcss()]),
      include: [appPath, path.resolve('./node_modules/antd/lib/')],
    },
    {
      test: /\.scss$/,
      loader: ExtractTextPlugin.extract(['css-loader?minimize', postcss(), 'sass-loader']),
      include: [appPath],
    },
  ];
  config.plugins = [
    ...config.plugins,
    new ExtractTextPlugin({
      filename: 'static/css/[name].[contenthash:10].css',
    }),
    new WebpackMd5Hash(),
    new webpack.LoaderOptionsPlugin({
      minimize: true,
      debug: false,
    }),
    new webpack.optimize.CommonsChunkPlugin({
      name: ['vendor', 'antd', 'bootstrap', 'manifest'],
    }),
    new webpack.optimize.UglifyJsPlugin({
      beautify: false,
      comments: false,
      compress: {
        screw_ie8: true,
        warnings: false,
      },
      mangle: {
        screw_ie8: true,
        keep_fnames: true,
      },
    }),
  ]
} else {
  config.devtool = 'eval';
  config.entry = [
    'react-hot-loader/patch',
    './src/index.tsx',
  ];
  config.output = {
    path: outPath,
    pathinfo: true,
    publicPath: baseUrl,
    filename: 'static/js/[name].bundle.js',
    sourceMapFilename: 'static/js/[name].bundle.map',
    chunkFilename: 'static/js/[id].chunk.js',
  };
  config.devServer = {
    port: 3000,
    contentBase: pubPath,
    publicPath: baseUrl,
    compress: true,
    historyApiFallback: true,
    hot: true,
    watchOptions: {
      poll: true,
    },
    stats: {
      colors: true,
      chunks: false,
      'errors-only': true,
    },
  };
  config.performance = {
    hints: false,
  };
  config.module.rules = [
    ...config.module.rules,
    {
      test: /\.css$/,
      use: ['style-loader', 'css-loader', postcss()],
      include: [appPath, path.resolve('./node_modules/antd/lib/')],
    },
    {
      test: /\.scss$/,
      use: ['style-loader', 'css-loader', postcss(), 'sass-loader'],
      include: [appPath],
    },
  ];
  config.plugins = [
    ...config.plugins,
    new CaseSensitivePathsPlugin(),
    new CheckerPlugin(),
    new StyleLintPlugin({
      context: appPath,
      emitErrors: true,
      failOnError: false,
      quiet: false,
      syntax: 'scss',
    }),
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NamedModulesPlugin(),
  ];
}

module.exports = config;
